#include <locale.h>
#include <iostream>
#include <stdlib.h>
#include <windows.h>        // библиотека компонентов ОС Windows

using namespace std;

/* У нас есть 4 варианта команд движения: вперед, направо, налево, стоп. Нужна соответствующая переменная. И в зависимости от того что ввел пользователь будем выбирать
конкретную команду. Воспользуемся конструкцией множественного выбора switch. Т.к. у нас команды целые числа, нам подходит switch. Еще нам потребуются стороны света и
направления движения робота. Далее нам нужно ввести начальное направление и сделать проверку ввода пользователя. Цикл do while тут подойдет! Мы будем заставлять пользо-
вателя вводить данные пока тот не введет правильное значение. Если вдруг пользователь неправильно ввел направление, нужно сообщить. Мы должны прописать это условие. А
когда пользователь введет нам правильное значение, выйдем из цикла бесконечного ввода.

Т.к. у нас 4 команды, то будет switch. На корректность введения данных будет проверка в самом switch. В зависимости от того, какое у нас первоначальное положение робота,
при подаче одной и той же команды будет разное положение поворота робота. Тут у нас тип данных char и int, а с ними switch case работает. У нас будет switch case внутри
которого будет свой switch case. Мы можем вкладывать друг в друга любые конструкции.
Введем начальное или текущее положение робота в конструкцию switch. Сначала мы выбираем направление, а потом выбираем действие, которое нужно сделать.

Мы сообщили пользователю о смене направления, но не самому роботу. Чтобы сам робот изменил направление, необходимо изменить переменную Direction, которая фиксирует и со-
держит его текущее положение. Чтобы определять текущее положение, её нужно менять. Когда текущее положение робота меняется, Direction нужно изменить. Она запоминает те-
кущее положение робота. Т.е. когда мы даем команду направо, мы не просто выведем на экран что робот повернет на восток, но и меняем его реальное местоположение. Нужно
не только для пользователя выводить на экран, но и изменять данные для оборудования.

Необходимо еще создать выключение робота. Если пользователь дал стоп команду, мы запросим подтверждение для выключения робота, если это команда дана чтобы выключиться
или просто остановиться. У нас есть две переменные, направление (Direction) и команда (Command). Переменную направление (Direction) мы не можем менять после того как
один раз уже ее ввели, а команду можем задать вручную. Если у нас будет команда стоп после остановки, то повторное её задание приведет к выключению (в цикле while). */

int main()
{
    setlocale(LC_ALL, "rus");

    cout << "--------------------------------------------------------Программа для управления роботом!--------------------------------------------------------" << endl;

    int Command = 0;                                                                // команда, вводимая с клавиатуры, необходима для switch
    enum Commands { Go = 11, Right = 10, Left = 01, Stop = 00 };
    char Direction = '+';                                                           // направление движения робота

    do                                                                              // цикл ввода начального положения робота
    {
        cout << R"(Введите первоначальное положение робота:
N(n) - Север
E(e) - Восток
S(s) - Юг
W(w) - Запад
)";
        cin >> Direction;

        system("cls");
        if (Direction == 'N' || Direction == 'n' || Direction == 'E' || Direction == 'e' || Direction == 'S' || Direction == 's' || Direction == 'W' || Direction == 'w')
            break;
        else cout << "Введено неверное направление! Повторите ввод!" << endl;
    } while (true);                                                                 // бесконечный цикл, выход из которого произойдет когда пользователь введет правиль-
                                                                                    // ные данные

    do                                                                              // цикл движения робота
    {
        system("cls");                                                              // чтобы не видеть историю движений. После этого нам нужно сообщить пользователю ка-
                                                                                    // кой у него набор команд
        cout << R"(
Робот готов и ожидает команду:
11 - двигаться вперед
10 - повернуть направо
01 - повернуть налево
00 - остановиться
)";                                                                                 // далее запрашиваем саму команду у пользователя
        cin >> Command;

        switch (Direction)                                                          // выбор текущего (начального) положения робота
        {
        case 'N':                                                                   // если текущее направление север 
        case 'n':
            switch (Command)                                                        // выбор команды, которую ввел пользователь
            {
            case Commands::Go:                                                      // case Go: или case 11:
                cout << "Робот поедет вперед - на север!" << endl;
                break;
            case Commands::Right:
                cout << "Робот повернет на восток!" << endl;
                Direction = 'E';                                                    // смена направления робота
                break;
            case Commands::Left:
                cout << "Робот повернет на запад!" << endl;
                Direction = 'W';                                                    // смена направления робота
                break;
            case Commands::Stop:
                cout << "Робот остановится и смотрит на север!" << endl;
                break;
            default:
                cout << "Некорректная команда!" << endl;
                break;
            }
            break;

        case 'S':                                                                   // если текущее направление юг 
        case 's':
            switch (Command)
            {
            case Commands::Go:
                cout << "Робот поедет вперед - на юг!" << endl;
                break;
            case Commands::Right:
                cout << "Робот повернет на запад!" << endl;
                Direction = 'W';
                break;
            case Commands::Left:
                cout << "Робот повернет на восток!" << endl;
                Direction = 'E';
                break;
            case Commands::Stop:
                cout << "Робот остановится и смотрит на юг!" << endl;
                break;
            default:
                cout << "Некорректная команда!" << endl;
                break;
            }
            break;

        case 'W':                                                                   // если текущее направление запад 
        case 'w':
            switch (Command)
            {
            case Commands::Go:
                cout << "Робот поедет вперед - на запад!" << endl;
                break;
            case Commands::Right:
                cout << "Робот повернет на север!" << endl;
                Direction = 'N';
                break;
            case Commands::Left:
                cout << "Робот повернет на юг!" << endl;
                Direction = 'S';
                break;
            case Commands::Stop:
                cout << "Робот остановится и смотрит на запад!" << endl;
                break;
            default:
                cout << "Некорректная команда!" << endl;
                break;
            }
            break;

        case 'E':                                                                   // если текущее направление восток
        case 'e':
            switch (Command)
            {
            case Commands::Go:
                cout << "Робот поедет вперед - на восток!" << endl;
                break;
            case Commands::Right:
                cout << "Робот повернет на юг!" << endl;
                Direction = 'S';
                break;
            case Commands::Left:
                cout << "Робот повернет на север!" << endl;
                Direction = 'N';
                break;
            case Commands::Stop:
                cout << "Робот остановится и смотрит на восток!" << endl;
                break;
            default:
                cout << "Некорректная команда!" << endl;
                break;
            }
            break;
        }
        if (Command == Commands::Stop)                                              // запрос подтверждения на выключение робота
        {
            cout << "Для продолжения работы робота введите 11, для выключения робота введите 00: " << endl;
            cin >> Command;
        }
        Sleep(2000);
    } while (Command != Commands::Stop);                                            // тоже самое что и while (Command!=Stop); или while (Command!=0);
    cout << "Выключение робота!" << endl;
    Sleep(1500);
}

/* Существует два вида возможных циклов:

1. Когда мы знаем точное количество повторений.
2. Когда мы не знаем точное количество повторений, но мы знаем условие когда цикл должен повторяться, либо знаем условие когда цикл должен завершиться. Это наш случай
(когда цикл должен завершиться). Создадим тут бесконечный цикл. А именно, если мы введем символ, который нас не устраивает, программа заставит нас ввести еще символ и
так снова и снова до тех пор, пока мы не введем нужный правильный символ. while (true) всегда истина и всегда будет выполняться.

Бесконечный цикл рекомендуется использовать лишь тогда, когда сложно сформулировать условие в самом цикле (в круглых его скобках).

Теперь нужно сами команды передавать роботу. Т.к. мы будем двигать робота неоднократно, мы будем передавать ему команды с помощью цикла (с помощью любого цикла). Возь-
мем цикл do while, т.к. мы, по меньшей мере, дадим ему одну команду.

Команда Sleep (лежит в библиотеке windows) и добавляет задержку программы в милисекундах. */